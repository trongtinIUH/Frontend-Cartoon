// src/api/axiosInstance.js
import axios from "axios";
import AuthService from "../services/AuthService";

const axiosInstance = axios.create({
  baseURL: 'http://localhost:8080'
});

axiosInstance.interceptors.request.use((config) => {
  const token = localStorage.getItem("idToken");

  if (token) {
    config.headers["Authorization"] = `Bearer ${token}`;
  }

  // ‚ùó Ch·ªâ set Content-Type n·∫øu KH√îNG ph·∫£i FormData
  if (!(config.data instanceof FormData)) {
    config.headers["Content-Type"] = "application/json";
  }

  return config;
});

// ‚úÖ Th√™m response interceptor ƒë·ªÉ x·ª≠ l√Ω l·ªói 401 v√† auto refresh token
axiosInstance.interceptors.response.use(
  (response) => {
    return response;
  },
  async (error) => {
    const originalRequest = error.config;
    
    // N·∫øu g·∫∑p l·ªói 401 v√† ch∆∞a retry
    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;
      
      try {
        console.log("üîÑ Attempting to refresh token...");
        
        // Th·ª≠ refresh token
        const newAuth = await AuthService.refresh();
        
        if (newAuth?.idToken) {
          // C·∫≠p nh·∫≠t token m·ªõi
          localStorage.setItem('idToken', newAuth.idToken);
          localStorage.setItem('my_user', JSON.stringify(newAuth));
          
          // Retry request v·ªõi token m·ªõi
          originalRequest.headers['Authorization'] = `Bearer ${newAuth.idToken}`;
          return axiosInstance(originalRequest);
        }
      } catch (refreshError) {
        console.warn("üîí Token refresh failed - redirecting to login");
        
        // X√≥a token c≈©
        localStorage.removeItem('idToken');
        localStorage.removeItem('my_user');
        localStorage.removeItem('phoneNumber');
        localStorage.removeItem('userAttributes');
        
        // Redirect v·ªÅ login page
        if (window.location.pathname !== '/login' && window.location.pathname !== '/register') {
          window.location.href = '/login';
        }
      }
    }
    
    return Promise.reject(error);
  }
);

export default axiosInstance;
