// ChatBox.jsx
import React, { useState, useEffect, useRef } from "react";
import { sendMessageToServer, fetchWelcome } from "../services/ChatService";
import { Link } from "react-router-dom";
import ReactMarkdown from "react-markdown";
import "../css/ChatBox.css";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faUpRightAndDownLeftFromCenter, faCommentDots } from "@fortawesome/free-solid-svg-icons";
import { useAuth } from "../context/AuthContext";

const ChatBox = ({ currentMovieId }) => {
  const { MyUser } = useAuth();
  
  // ‚úÖ Conversation ID for persistent chat session
  const convRef = useRef(localStorage.getItem('ai_conv_id') || crypto.randomUUID());
  useEffect(() => {
    localStorage.setItem('ai_conv_id', convRef.current);
  }, []);

  const [message, setMessage] = useState("");
  const [chatLog, setChatLog] = useState([]);
  const [loading, setLoading] = useState(false);
  const [isOpen, setIsOpen] = useState(false);
  const [isFullScreen, setIsFullScreen] = useState(false);
  const [questionCount, setQuestionCount] = useState(0);
  const [showQuickSuggestions, setShowQuickSuggestions] = useState(false); // ‚úÖ NEW: state ƒë·ªÉ control quick suggestions
  const MAX_QUESTIONS_GUEST = 3; // Gi·ªõi h·∫°n 3 c√¢u h·ªèi cho kh√°ch
  
  // Ref ƒë·ªÉ scroll xu·ªëng tin nh·∫Øn cu·ªëi c√πng
  const chatContentRef = useRef(null);
  const messagesEndRef = useRef(null);

  // Reset conversation function
  const resetConversation = () => {
    localStorage.removeItem('ai_conv_id');
    convRef.current = crypto.randomUUID();
    localStorage.setItem('ai_conv_id', convRef.current);
    setChatLog([]);
    setQuestionCount(0);
  };
  
  const [quick, setQuick] = useState([
    "C√≥ khuy·∫øn m√£i hay voucher n√†o kh√¥ng?",
    "M√£ gi·∫£m gi√° cho g√≥i VIP r·∫ª nh·∫•t",
    "∆Øu ƒë√£i ƒëang ho·∫°t ƒë·ªông h√¥m nay",
    "G·ª£i √Ω phim gia ƒë√¨nh",
    "Top phim chi·∫øu r·∫°p m·ªõi"
  ]);

  // H√†m scroll xu·ªëng cu·ªëi
  const scrollToBottom = () => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ 
        behavior: "smooth", 
        block: "end" 
      });
    }
  };

  // Auto scroll khi c√≥ tin nh·∫Øn m·ªõi ho·∫∑c loading thay ƒë·ªïi
  useEffect(() => {
    scrollToBottom();
  }, [chatLog, loading]);

  // Khi m·ªü chat l·∫ßn ƒë·∫ßu -> g·ªçi welcome
  useEffect(() => {
    if (isOpen && chatLog.length === 0) {
      (async () => {
        try {
          const res = await fetchWelcome(convRef.current);
          const welcomeMsg = MyUser 
            ? res.answer.replace(/b·∫°n/gi, MyUser?.my_user?.userName || MyUser?.username || "b·∫°n")
            : res.answer;
          setChatLog([{ 
            role: "assistant", 
            content: welcomeMsg, 
            suggestions: res.showSuggestions ? res.suggestions : [], 
            showSuggestions: res.showSuggestions,
            promos: res.showPromos ? res.promos : [],
            showPromos: res.showPromos
          }]);
        } catch(e) {
          console.error("‚ùå Welcome API failed:", e);
          const errorMsg = e.message || "Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi server chat";
          const welcomeText = MyUser 
            ? `Ch√†o ${MyUser?.my_user?.userName || MyUser?.username}! ${errorMsg}`
            : `Ch√†o b·∫°n! ${errorMsg} (Gi·ªõi h·∫°n 3 c√¢u h·ªèi cho kh√°ch)`;
          setChatLog([{ role: "assistant", content: welcomeText }]);
        }
      })();
    }
  }, [isOpen, MyUser]);

  // Reset questionCount khi user ƒëƒÉng nh·∫≠p/ƒëƒÉng xu·∫•t
  useEffect(() => {
    if (MyUser) {
      setQuestionCount(0); // Reset khi ƒëƒÉng nh·∫≠p
    }
  }, [MyUser]);

  const handleSend = async () => {
    if (!message.trim()) return;
    
    // Ki·ªÉm tra gi·ªõi h·∫°n c√¢u h·ªèi cho kh√°ch
    if (!MyUser && questionCount >= MAX_QUESTIONS_GUEST) {
      setChatLog((prev) => [...prev, { 
        role: "assistant", 
        content: "‚ùå B·∫°n ƒë√£ h·∫øt l∆∞·ª£t h·ªèi! Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng d·ªãch v·ª•." 
      }]);
      return;
    }

    const userMsg = { 
      role: "user", 
      content: message,
      username: MyUser ? (MyUser?.my_user?.userName || MyUser?.username) : "Kh√°ch"
    };
    setChatLog((prev) => [...prev, userMsg]);
    setMessage("");
    setLoading(true);

    // TƒÉng s·ªë c√¢u h·ªèi n·∫øu l√† kh√°ch
    if (!MyUser) {
      setQuestionCount(prev => prev + 1);
    }

    try {
      const res = await sendMessageToServer(message, currentMovieId, convRef.current);
      const aiMsg = {
        role: "assistant",
        content: res.answer,
        suggestions: res.showSuggestions ? (res.suggestions || []) : [],
        showSuggestions: !!res.showSuggestions,
        promos: res.showPromos ? (res.promos || []) : [],
        showPromos: !!res.showPromos
      };
      setChatLog((prev) => [...prev, aiMsg]);
    } catch (error) {
      console.error("‚ùå Chat error:", error);
      const errorMsg = error.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh";
      setChatLog((prev) => [...prev, { 
        role: "assistant", 
        content: `‚ùå ${errorMsg}` 
      }]);
    } finally { setLoading(false); }
  };

  // Khi click quick-chip -> g·ª≠i lu√¥n
  const sendQuick = async (text) => {
    // Ki·ªÉm tra gi·ªõi h·∫°n c√¢u h·ªèi cho kh√°ch
    if (!MyUser && questionCount >= MAX_QUESTIONS_GUEST) {
      setChatLog((prev) => [...prev, { 
        role: "assistant", 
        content: "‚ùå B·∫°n ƒë√£ h·∫øt l∆∞·ª£t h·ªèi! Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng d·ªãch v·ª•." 
      }]);
      return;
    }

    const userMsg = { 
      role: "user", 
      content: text,
      username: MyUser ? (MyUser?.my_user?.userName || MyUser?.username) : "Kh√°ch"
    };
    setChatLog((prev) => [...prev, userMsg]);
    setLoading(true);

    // TƒÉng s·ªë c√¢u h·ªèi n·∫øu l√† kh√°ch
    if (!MyUser) {
      setQuestionCount(prev => prev + 1);
    }

    try {
      const res = await sendMessageToServer(text, currentMovieId, convRef.current);
      const aiMsg = {
        role: "assistant",
        content: res.answer,
        suggestions: res.showSuggestions ? (res.suggestions || []) : [],
        showSuggestions: !!res.showSuggestions,
        promos: res.showPromos ? (res.promos || []) : [],
        showPromos: !!res.showPromos
      };
      setChatLog((prev) => [...prev, aiMsg]);
    } catch {
      setChatLog((prev) => [...prev, { role: "assistant", content: "‚ùå L·ªói khi g·ªçi AI!" }]);
    } finally { 
      setLoading(false); 
    }
  };

  if (!isOpen) {
    return (
      <div
        onClick={() => setIsOpen(true)}
        style={{
          position: "fixed", bottom: 20, right: 20, width: 60, height: 60,
          borderRadius: "50%", backgroundColor: "#007bff", color: "white",
          display: "flex", alignItems: "center", justifyContent: "center",
          fontSize: 28, cursor: "pointer", zIndex: 9999,
        }}
      >
        <FontAwesomeIcon icon={faCommentDots} />
      </div>
    );
  }

  return (
    <div className={`chatbox-wrapper${isFullScreen ? " fullscreen" : ""}`}>
      <div className="chatbox-container">
        <div className="chatbox-header">
          <span>Chat AI CartoonToo</span>
          <div className="header-actions">
            <button 
              className="chatbox-suggestion-btn" 
              onClick={() => setShowQuickSuggestions(!showQuickSuggestions)}
              title={showQuickSuggestions ? "·∫®n g·ª£i √Ω nhanh" : "Hi·ªán g·ª£i √Ω nhanh"}
            >
              üí°
            </button>
            {!isFullScreen ? (
              <button className="chatbox-zoom-btn" onClick={() => setIsOpen(false)} title="Thu g·ªçn">
                <FontAwesomeIcon icon={faUpRightAndDownLeftFromCenter} />
              </button>
            ) : (
              <button className="chatbox-zoom-btn" onClick={() => setIsFullScreen(false)} title="Thu nh·ªè">üóó</button>
            )}
          </div>
        </div>

        <div className="chatbox-content" ref={chatContentRef}>
          {chatLog.map((msg, i) => (
            <div className={`chatbox-message ${msg.role}`} key={i}>
              <strong>{msg.role === "user" ? `${msg.username}: ` : "AI: "}</strong>
              <ReactMarkdown>{msg.content}</ReactMarkdown>

              {msg.suggestions?.length > 0 && (
                <div className="suggestion-grid">
                  {msg.suggestions.map((m, idx) => (
                     <Link
                        key={m.movieId}
                        to={`/movie/${m.movieId}`}
                        className="movie-suggestion-card"
                        onClick={() => setIsOpen(false)}
                      >
                      <img src={m.thumbnailUrl} alt={m.title} className="movie-thumb" />
                      <div className="movie-info">
                        <div className="movie-title">{idx + 1}. {m.title}</div>
                        <div className="movie-meta">
                          <span>{m.viewCount} l∆∞·ª£t xem</span>
                          <div><strong>Th·ªÉ lo·∫°i:</strong> {m.genres?.join(", ")}</div>
                        </div>
                      </div>
                    </Link>
                  ))}
                </div>
              )}

              {/* PROMOS */}
              {msg.showPromos && msg.promos?.length > 0 && (
                <div className="promo-grid">
                  {msg.promos.map((p, i) => (
                    <div key={p.promotionId + i} className="promo-card">
                      <div className="promo-title">{p.promotionName || p.title}</div>
                      <div className="promo-meta">
                        <div><b>Lo·∫°i:</b> {p.type}</div>
                        {p.voucherCode && (
                          <div className="voucher-code-row">
                            <b>M√£:</b> 
                            <span 
                              className="voucher-code" 
                              onClick={() => {
                                navigator.clipboard.writeText(p.voucherCode);
                                alert(`ƒê√£ sao ch√©p m√£: ${p.voucherCode}`);
                              }}
                              title="Click ƒë·ªÉ copy m√£"
                            >
                              {p.voucherCode}
                            </span>
                          </div>
                        )}
                        {p.discountPercent != null && <div><b>Gi·∫£m:</b> {p.discountPercent}%</div>}
                        {p.maxDiscountAmount != null && <div><b>T·ªëi ƒëa:</b> {p.maxDiscountAmount.toLocaleString()}ƒë</div>}
                        <div><b>HSD:</b> {p.endDate}</div>
                      </div>
                      {p.note && <div className="promo-note">{p.note}</div>}
                    </div>
                  ))}
                </div>
              )}
            </div>
          ))}
          {loading && <div className="chatbox-message assistant">AI ƒëang tr·∫£ l·ªùi...</div>}
          
          {/* Hi·ªÉn th·ªã quick suggestions khi chat tr·ªëng ho·∫∑c ch·ªâ c√≥ welcome message HO·∫∂C khi user b·∫≠t manually */}
          {(showQuickSuggestions || chatLog.length === 0 || (chatLog.length === 1 && chatLog[0].role === "assistant")) && (
            <div className="quick-suggestions">
              <div className="quick-title">üí° B·∫°n c√≥ th·ªÉ h·ªèi:</div>
              <div className="quick-chips">
                {quick.map((q, idx) => (
                  <button 
                    key={idx} 
                    className="quick-chip"
                    onClick={() => {
                      sendQuick(q);
                      setShowQuickSuggestions(false); // ·∫®n ƒëi sau khi click
                    }}
                  >
                    {q}
                  </button>
                ))}
              </div>
            </div>
          )}
          
          {/* Invisible element ƒë·ªÉ scroll xu·ªëng */}
          <div ref={messagesEndRef} />
        </div>

        <div className="chatbox-input-area">
          <div className="input-wrapper">
            <input
              type="text"
              value={message}
              onChange={(e) => setMessage(e.target.value)}
              onKeyDown={(e) => e.key === "Enter" && handleSend()}
              placeholder={MyUser ? "Nh·∫≠p c√¢u h·ªèi v·ªÅ phim..." : `C√¢u h·ªèi v·ªÅ phim... (${MAX_QUESTIONS_GUEST - questionCount}/3)`}
              className="chatbox-input"
              disabled={!MyUser && questionCount >= MAX_QUESTIONS_GUEST}
            />
            {!MyUser && questionCount < MAX_QUESTIONS_GUEST && (
              <span className="guest-limit-badge">{MAX_QUESTIONS_GUEST - questionCount}</span>
            )}
          </div>
          <button 
            onClick={handleSend} 
            className="chatbox-send-button"
            disabled={!MyUser && questionCount >= MAX_QUESTIONS_GUEST}
          >
            G·ª≠i
          </button>
        </div>
      </div>
    </div>
  );
};

export default ChatBox;
